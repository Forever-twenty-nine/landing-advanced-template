name: Deploy Astro site to Pages

# 📌 Este workflow se ejecuta cuando haces push a la rama "master" o lo disparás manualmente.
on:
  push:
    branches: ["master"]
  workflow_dispatch:

# 🔐 Permisos necesarios para publicar en GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 🔁 Evita que se ejecuten múltiples builds en paralelo innecesarios
concurrency:
  group: "pages"
  cancel-in-progress: false

# 🌍 Variables de entorno globales
env:
  BUILD_PATH: "."  # Carpeta base donde se ejecutan los comandos

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # 📥 Clona el repo
      - name: Checkout
        uses: actions/checkout@v4

      # 🔐 Autenticación con GitHub Packages (necesaria para instalar tu librería privada)
      - name: Authenticate with GitHub Packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "@forever-twenty-nine:registry=https://npm.pkg.github.com" >> ~/.npmrc

      # 🔍 Detecta si estás usando npm o yarn y define comandos de instalación y build
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      # 🧱 Instala Node.js y usa cache si hay lockfile
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      # ⚙️ Configura GitHub Pages para obtener rutas base y origen
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      # 📦 Instala las dependencias del proyecto (incluye tu librería privada)
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      # 🏗 Compila el sitio Astro
      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.runner }} astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}

      # ☁️ Sube el sitio compilado como artefacto para publicarlo
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  # 🚀 Job que se encarga de desplegar a GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
